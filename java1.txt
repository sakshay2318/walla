public static final List<Pattern> idorPatterns = Arrays.asList(
    
    // 1. No role check in API endpoint
    Pattern.compile("\\b@RequestMapping\\s*\\(.*\\)\\s*public\\s+[^{]+\\{"), // Missing authentication checks
    
    // 2. Exposed sensitive routes without authentication
    Pattern.compile("@GetMapping\\(\"/admin/.*\"\\)"), // Exposed admin routes
    
    // 3. Direct object access using request parameters
    Pattern.compile("request\\.getParameter\\(\"(userId|accountId|orderId)\"\\)"), // IDOR via query parameter
    
    // 4. Direct access to repository layer without authorization
    Pattern.compile("\\bJpaRepository<.*>\\s+.*;"), // Direct access to repositories
    
    // 5. Using PathVariable without access control
    Pattern.compile("@PathVariable\\(\"(id|userId|accountId)\"\\)"), // Potential IDOR
    
    // 6. Missing @PreAuthorize or @Secured annotation
    Pattern.compile("public\\s+[^{]+\\{[^@]*\\}"), // No security annotations
    
    // 7. Direct access to EntityManager without role check
    Pattern.compile("entityManager\\.find\\(.*\\.class,\\s*request\\.getParameter"), // Unsafe entity retrieval
    
    // 8. Using findById without validation
    Pattern.compile("repository\\.findById\\(request\\.getParameter"), // Direct access with user input
    
    // 9. Missing security filter in Spring Security
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)"), // Security config might be missing controls
    
    // 10. Allowing unauthenticated requests globally
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.anyRequest\\(\\)\\.permitAll"), // Global exposure
    
    // 11. No authentication middleware for API
    Pattern.compile("new\\s+HttpSecurityConfig"), // Checking for missing auth layers
    
    // 12. No role-based check in a controller
    Pattern.compile("public\\s+ResponseEntity\\<.*\\>\\s+[a-zA-Z]+\\(.*@RequestParam"), // Role validation missing
    
    // 13. Unauthenticated access to update methods
    Pattern.compile("@PutMapping\\(.*\\)\\s*public\\s+[^{]+\\{"), // PUT request exposed
    
    // 14. Exposed delete method without authentication
    Pattern.compile("@DeleteMapping\\(.*\\)\\s*public\\s+[^{]+\\{"), // DELETE request exposed
    
    // 15. Hardcoded API key usage
    Pattern.compile("apikey\\s*=\\s*\"[A-Za-z0-9]+\""), // Hardcoded credentials
    
    // 16. Accessing user objects without ownership validation
    Pattern.compile("userRepository\\.findById\\(.*request\\.getParameter"), // Missing ownership validation
    
    // 17. Using JWT token but missing role verification
    Pattern.compile("JwtUtil\\.extractUsername\\(token\\)"), // Token extracted but roles not checked
    
    // 18. Allowing unrestricted CORS policy
    Pattern.compile("corsConfiguration\\.setAllowedOrigins\\(Arrays\\.asList\\(\"\\*\"\\)"), // Open CORS
    
    // 19. Exposed REST API without @Secured annotation
    Pattern.compile("@RestController\\s*public\\s+class\\s+.*\\{"), // Missing @Secured or @PreAuthorize
    
    // 20. Returning all users without filtering
    Pattern.compile("userRepository\\.findAll\\(\\)"), // Unfiltered user retrieval
    
    // 21. Using weak hashing for password storage
    Pattern.compile("MessageDigest\\.getInstance\\(\"MD5\"\\)"), // MD5 is insecure
    
    // 22. Logging sensitive data
    Pattern.compile("logger\\.info\\(.*password.*\\)"), // Logging passwords
    
    // 23. No verification on mass assignment
    Pattern.compile("BeanUtils\\.copyProperties"), // Possible mass assignment vulnerability
    
    // 24. Returning complete user details
    Pattern.compile("return\\s+ResponseEntity\\.ok\\(user\\)"), // Full user details exposure
    
    // 25. No CSRF protection enabled
    Pattern.compile("httpSecurity\\.csrf\\(\\)\\.disable\\(\\)"), // CSRF disabled
    
    // 26. Storing passwords in plain text
    Pattern.compile("user\\.setPassword\\(request\\.getParameter"), // Password stored without hashing
    
    // 27. Using system properties to retrieve secrets
    Pattern.compile("System\\.getProperty\\(\"password\"\\)"), // Reading passwords from env variables
    
    // 28. Unrestricted file upload endpoint
    Pattern.compile("@PostMapping\\(\"/upload\"\\)"), // File upload without validation
    
    // 29. No rate limiting on sensitive endpoints
    Pattern.compile("public\\s+ResponseEntity<.*>\\s+login"), // Login endpoint without rate limiting
    
    // 30. Using insecure random values
    Pattern.compile("new\\s+Random\\(\\)\\.nextInt\\(\\)"), // Weak random number generation
    
    // 31. SQL Injection vulnerability in query methods
    Pattern.compile("@Query\\(\"SELECT.*WHERE.*\"\\)"), // Dynamic query without parameter binding
    
    // 32. No logout endpoint
    Pattern.compile("httpSecurity\\.logout\\(\\)\\.disable\\(\\)"), // Logout disabled
    
    // 33. Allowing multiple active sessions
    Pattern.compile("httpSecurity\\.sessionManagement\\(\\)\\.sessionCreationPolicy\\(SessionCreationPolicy\\.ALWAYS\\)"), // No session restrictions
    
    // 34. Allowing GET requests for sensitive actions
    Pattern.compile("@GetMapping\\(\"/deleteUser\"\\)"), // Delete action in GET request
    
    // 35. Using insecure authentication bypass
    Pattern.compile("if\\s*\\(username\\.equals\\(\"admin\"\\)\\)"), // Hardcoded admin bypass
    
    // 36. Using insecure token storage
    Pattern.compile("new\\s+Cookie\\(\"token\",\\s*.*\\)"), // Storing tokens in cookies without HttpOnly
    
    // 37. No password complexity enforcement
    Pattern.compile("password\\.length\\(\\)\\s*<\\s*6"), // Weak password validation
    
    // 38. Sensitive data exposed in exception messages
    Pattern.compile("throw\\s+new\\s+Exception\\(.*userId.*\\)"), // Exposing sensitive info in errors
    
    // 39. Allowing unauthorized user account changes
    Pattern.compile("user\\.setEmail\\(request\\.getParameter"), // Unrestricted profile edits
    
    // 40. No audit logging for admin actions
    Pattern.compile("adminService\\.deleteUser\\(.*\\)"), // Admin actions without logging
    
    // 41. Using default database credentials
    Pattern.compile("spring\\.datasource\\.username=sa"), // Default database username
    
    // 42. Improper session timeout
    Pattern.compile("httpSecurity\\.sessionManagement\\(\\)\\.sessionTimeout\\(\\)"), // No timeout enforcement
    
    // 43. Allowing anonymous user actions
    Pattern.compile("@PreAuthorize\\(\"hasRole\\('ANONYMOUS'\\)\"\\)"), // Anonymous users allowed
    
    // 44. No encryption for sensitive fields
    Pattern.compile("user\\.getCreditCard\\(\\)"), // Sensitive data exposed
    
    // 45. Using deprecated security methods
    Pattern.compile("Base64\\.decode\\(.*\\)"), // Weak encoding for passwords
    
    // 46. No input validation on user input
    Pattern.compile("request\\.getParameter\\(\".*\"\\)"), // No validation before use
    
    // 47. Allowing wildcard origins in CORS
    Pattern.compile("@CrossOrigin\\(\\*\\)"), // Open CORS policy
    
    // 48. Allowing direct ID manipulation in updates
    Pattern.compile("userRepository\\.save\\(new User\\(request\\.getParameter"), // Unvalidated object updates
    
    // 49. Using debug mode in production
    Pattern.compile("spring\\.boot\\.debug=true"), // Debug mode enabled
    
    // 50. Using default error handling revealing stack traces
    Pattern.compile("server\\.error\\.include-stacktrace=always") // Stack traces exposed
);
public static final List<Pattern> idorPatternsAdditional = Arrays.asList(

    // 51. Using user-supplied ID without validation in a repository query
    Pattern.compile("findById\\(request\\.getParameter\\(\"(id|userId|accountId)\"\\)\\)"), 

    // 52. Missing `@PreAuthorize` or `@RolesAllowed` for sensitive APIs
    Pattern.compile("public\\s+ResponseEntity<.*>\\s+[a-zA-Z]+\\(.*@RequestParam"),

    // 53. Directly exposing JPA repositories without a service layer
    Pattern.compile("extends JpaRepository<.*>\\s*\\{"), 

    // 54. Hardcoded sensitive URLs in API handlers
    Pattern.compile("@RequestMapping\\(\"/admin/.*\"\\)"),

    // 55. Missing `hasRole()` or `hasAuthority()` in security configuration
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.anyRequest\\(\\)\\.authenticated\\(\\)"), 

    // 56. Retrieving all database records without filtering by user ID
    Pattern.compile("repository\\.findAll\\(\\)"),

    // 57. Missing validation when using `@RequestBody`
    Pattern.compile("public\\s+ResponseEntity<.*>\\s+[a-zA-Z]+\\(@RequestBody\\s+[A-Z]"),

    // 58. Using raw SQL queries with user input
    Pattern.compile("entityManager\\.createQuery\\(\"SELECT.*FROM.*WHERE.*=\\s*'\\s*\"\\s*\\+\\s*request\\.getParameter"),

    // 59. No `@Transactional` annotation for database operations
    Pattern.compile("public\\s+[^{]+\\{[^@]*repository\\..*\\}"), 

    // 60. Allowing unrestricted data export (CSV, JSON, XML)
    Pattern.compile("@GetMapping\\(\"/export\"\\)"), 

    // 61. Missing pagination controls when returning large datasets
    Pattern.compile("return ResponseEntity\\.ok\\(repository\\.findAll\\(\\)\\)"),

    // 62. Weak token validation (JWT or session ID not verified)
    Pattern.compile("JwtUtil\\.parseToken\\(request\\.getHeader\\(\"Authorization\"\\)\\)"),

    // 63. No password confirmation in sensitive actions
    Pattern.compile("@PostMapping\\(\"/changePassword\"\\)"), 

    // 64. Using `@CrossOrigin("*")` on all controllers
    Pattern.compile("@CrossOrigin\\(\"\\*\"\\)"), 

    // 65. Allowing full-text search without access control
    Pattern.compile("@GetMapping\\(\"/search\"\\)"),

    // 66. Exposing logs with sensitive data
    Pattern.compile("logger\\.info\\(\".*password.*\"\\)"),

    // 67. Storing security tokens in local storage
    Pattern.compile("localStorage\\.setItem\\(\"token\",.*\\)"), 

    // 68. Bypassing authentication with hardcoded admin accounts
    Pattern.compile("if\\s*\\(username\\.equals\\(\"admin\"\\)\\)"), 

    // 69. Insecure file download endpoint
    Pattern.compile("@GetMapping\\(\"/download/.*\"\\)"),

    // 70. Allowing session fixation attacks
    Pattern.compile("httpSecurity\\.sessionManagement\\(\\)\\.sessionFixation\\(SessionFixationStrategy\\.NONE\\)"), 

    // 71. Missing account lockout mechanism for failed logins
    Pattern.compile("authenticationManager\\.authenticate\\("),

    // 72. Insecurely injecting dynamic queries into Hibernate
    Pattern.compile("session\\.createQuery\\(\"FROM\\s+.*WHERE.*\"\\)"),

    // 73. Using `getParameter` instead of `getAttribute` for sensitive data
    Pattern.compile("request\\.getParameter\\(\".*\"\\)"), 

    // 74. Logging stack traces in production
    Pattern.compile("logger\\.error\\(e\\.getMessage\\(\\)\\)"), 

    // 75. Missing IP-based access restrictions for admin APIs
    Pattern.compile("@RequestMapping\\(\"/admin/.*\"\\)"), 

    // 76. Not hashing API keys before storing
    Pattern.compile("apikey\\s*=\\s*\"[A-Za-z0-9]+\""), 

    // 77. Using weak regular expressions for input validation
    Pattern.compile("request\\.getParameter\\(\"email\"\\)\\.matches\\(\"[a-zA-Z0-9]+\"\\)"),

    // 78. No origin checks for OAuth redirect URIs
    Pattern.compile("oauthService\\.redirectTo\\(request\\.getParameter\\(\"redirect_uri\"\\)\\)"),

    // 79. Allowing weak passwords with no enforcement policy
    Pattern.compile("password\\.length\\(\\)\\s*<\\s*6"), 

    // 80. Using default credentials in configuration files
    Pattern.compile("spring\\.datasource\\.username=root"),

    // 81. No authorization check in `@PatchMapping` endpoints
    Pattern.compile("@PatchMapping\\(.*\\)\\s*public\\s+[^{]+\\{"),

    // 82. Exposing system environment variables via API
    Pattern.compile("System\\.getenv\\(\".*\"\\)"), 

    // 83. Allowing unrestricted email changes without verification
    Pattern.compile("user\\.setEmail\\(request\\.getParameter\\(\"email\"\\)\\)"), 

    // 84. Not restricting object updates to the owner
    Pattern.compile("repository\\.save\\(request\\.getParameter\\(\"id\"\\)\\)"), 

    // 85. Not validating user roles in `@PostMapping` actions
    Pattern.compile("@PostMapping\\(.*\\)\\s*public\\s+[^{]+\\{"),

    // 86. Allowing unauthenticated access to user profiles
    Pattern.compile("@GetMapping\\(\"/profile\"\\)"),

    // 87. Returning raw exception messages in API responses
    Pattern.compile("ResponseEntity\\.status\\(HttpStatus\\.BAD_REQUEST\\)\\.body\\(e\\.getMessage\\(\\)\\)"),

    // 88. Using `@PostMapping("/register")` without email verification
    Pattern.compile("@PostMapping\\(\"/register\"\\)"),

    // 89. Allowing unlimited API requests without rate limiting
    Pattern.compile("public\\s+ResponseEntity<.*>\\s+[a-zA-Z]+\\(@RequestParam"),

    // 90. Storing passwords in memory without encryption
    Pattern.compile("new\\s+String\\(Base64\\.decode\\("), 

    // 91. Allowing wildcard subdomains in CORS
    Pattern.compile("cors\\.setAllowedOrigins\\(Collections\\.singletonList\\(\".*\\.example\\.com\"\\)\\)"),

    // 92. Using HTTP instead of HTTPS for sensitive endpoints
    Pattern.compile("@RequestMapping\\(\"http://.*\"\\)"), 

    // 93. Using static variables to store session data
    Pattern.compile("private static Map<String, String> sessions"), 

    // 94. Returning database error messages directly to the client
    Pattern.compile("ResponseEntity\\.status\\(HttpStatus\\.INTERNAL_SERVER_ERROR\\)\\.body\\(e\\.getMessage\\(\\)\\)"),

    // 95. No logout function in the security configuration
    Pattern.compile("httpSecurity\\.logout\\(\\)\\.disable\\(\\)"), 

    // 96. No role enforcement when deleting records
    Pattern.compile("@DeleteMapping\\(\"/delete/.*\"\\)"), 

    // 97. Using insecure cryptographic algorithms
    Pattern.compile("MessageDigest\\.getInstance\\(\"SHA-1\"\\)"), 

    // 98. No input sanitization before using user input in SQL queries
    Pattern.compile("statement\\.executeQuery\\(\"SELECT.*FROM.*WHERE.*\\+.*request\\.getParameter"), 

    // 99. Exposing internal stack traces in REST responses
    Pattern.compile("ExceptionUtils\\.getStackTrace\\(e\\)"), 

    // 100. Allowing unrestricted JWT token creation
    Pattern.compile("Jwts\\.builder\\(\\)\\.signWith\\(Keys\\.hmacShaKeyFor\\(.*\\)\\)")

);
public static final List<Pattern> idorPatternsMore = Arrays.asList(

    // 101. Missing access control in GraphQL endpoints
    Pattern.compile("@QueryMapping\\(\".*\"\\)"),

    // 102. Allowing direct access to database records via IDs in query parameters
    Pattern.compile("request\\.getParameter\\(\"(id|userId|orderId)\"\\)"),

    // 103. Returning sensitive user details without filtering
    Pattern.compile("return ResponseEntity\\.ok\\(userRepository\\.findById\\("),

    // 104. Missing authentication in WebSocket endpoints
    Pattern.compile("@ServerEndpoint\\(\".*\"\\)"), 

    // 105. Direct use of JPA repositories without ownership validation
    Pattern.compile("JpaRepository<.*>"),

    // 106. No `@PreAuthorize` or `@Secured` annotations for sensitive methods
    Pattern.compile("public\\s+[^{]+\\{[^@]*\\}"),

    // 107. Exposing full stack traces in error responses
    Pattern.compile("return ResponseEntity\\.status\\(HttpStatus\\.INTERNAL_SERVER_ERROR\\)\\.body\\(e\\.getMessage\\(\\)\\)"),

    // 108. Accepting user input for object IDs in entity lookups
    Pattern.compile("repository\\.findById\\(request\\.getParameter"),

    // 109. Using weak JWT secret keys
    Pattern.compile("Keys\\.hmacShaKeyFor\\(Base64\\.decode\\("),

    // 110. Exposed endpoints without authentication in Spring Security config
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.antMatchers\\(\"/.*\"\\)\\.permitAll"),

    // 111. Allowing unlimited failed login attempts (brute force attack)
    Pattern.compile("authenticationManager\\.authenticate\\(new UsernamePasswordAuthenticationToken"),

    // 112. Missing role validation in controllers with `@GetMapping`
    Pattern.compile("@GetMapping\\(\".*\"\\)"),

    // 113. Using `@RestController` without access control
    Pattern.compile("@RestController\\s*public\\s+class\\s+.*\\{"),

    // 114. Allowing unauthenticated access to logs
    Pattern.compile("@GetMapping\\(\"/logs\"\\)"),

    // 115. Accepting raw passwords in API request body
    Pattern.compile("@RequestBody\\s+String\\s+password"),

    // 116. Hardcoded admin credentials in code
    Pattern.compile("adminPassword\\s*=\\s*\"[A-Za-z0-9]+\""),

    // 117. No CSRF protection in Spring Security config
    Pattern.compile("httpSecurity\\.csrf\\(\\)\\.disable\\(\\)"),

    // 118. Exposed database connection details in logs
    Pattern.compile("logger\\.info\\(\"Database connected: .*\"\\)"),

    // 119. Allowing direct execution of system commands
    Pattern.compile("Runtime\\.getRuntime\\(\\)\\.exec\\("),

    // 120. Using `request.getParameter` for security-sensitive values
    Pattern.compile("request\\.getParameter\\(\".*password.*\"\\)"),

    // 121. Allowing unrestricted file uploads
    Pattern.compile("@PostMapping\\(\"/upload\"\\)"),

    // 122. Not sanitizing input before using in dynamic queries
    Pattern.compile("createQuery\\(\"SELECT.*FROM.*WHERE.*'\\s*\\+\\s*request\\.getParameter"),

    // 123. Using MD5 hashing for passwords
    Pattern.compile("MessageDigest\\.getInstance\\(\"MD5\"\\)"),

    // 124. Not verifying user identity before performing sensitive actions
    Pattern.compile("@PutMapping\\(\"/updateProfile\"\\)"),

    // 125. Using default Spring Boot error pages that reveal sensitive information
    Pattern.compile("server\\.error\\.include-message=always"),

    // 126. Allowing access to hidden debug endpoints
    Pattern.compile("@GetMapping\\(\"/debug\"\\)"),

    // 127. Allowing unrestricted mass assignment of user data
    Pattern.compile("BeanUtils\\.copyProperties\\("),

    // 128. Storing session tokens in local storage (client-side)
    Pattern.compile("localStorage\\.setItem\\(\"sessionToken\", .*\\)"),

    // 129. No access control in `@DeleteMapping` endpoints
    Pattern.compile("@DeleteMapping\\(\".*\"\\)"),

    // 130. Allowing unauthenticated access to payment details
    Pattern.compile("@GetMapping\\(\"/payments\"\\)"),

    // 131. Not verifying user permissions when modifying resources
    Pattern.compile("repository\\.save\\(request\\.getParameter\\(\"id\"\\)\\)"),

    // 132. Allowing anonymous access to logs
    Pattern.compile("@GetMapping\\(\"/logs\"\\)"),

    // 133. Using hardcoded encryption keys
    Pattern.compile("String\\s+key\\s*=\\s*\"[A-Za-z0-9]+\""),

    // 134. Allowing account enumeration in login responses
    Pattern.compile("return ResponseEntity\\.status\\(HttpStatus\\.UNAUTHORIZED\\)\\.body\\(\"Invalid username\"\\)"),

    // 135. No rate-limiting on API endpoints
    Pattern.compile("return ResponseEntity\\.ok\\(.*\\)"),

    // 136. Allowing unrestricted API token generation
    Pattern.compile("Jwts\\.builder\\(\\)\\.signWith\\("),

    // 137. Accepting user IDs as URL parameters without verification
    Pattern.compile("@RequestParam\\(\"(id|userId|accountId)\"\\)"),

    // 138. Using `System.getenv` to access secrets
    Pattern.compile("System\\.getenv\\(\".*\"\\)"),

    // 139. Allowing unauthenticated WebSocket connections
    Pattern.compile("@ServerEndpoint\\(\".*\"\\)"),

    // 140. Using `Thread.sleep` to simulate authentication delays
    Pattern.compile("Thread\\.sleep\\("),

    // 141. Storing API keys in configuration files without encryption
    Pattern.compile("api\\.key\\s*=\\s*\"[A-Za-z0-9]+\""),

    // 142. Using `@ResponseBody` without filtering sensitive data
    Pattern.compile("@ResponseBody\\s+public\\s+User"),

    // 143. Not enforcing `Content-Type: application/json` in API requests
    Pattern.compile("request\\.getContentType\\(\\)"),

    // 144. Allowing GET requests for password resets
    Pattern.compile("@GetMapping\\(\"/resetPassword\"\\)"),

    // 145. Using `Base64.encode` for password storage
    Pattern.compile("Base64\\.encode\\("),

    // 146. Allowing unrestricted access to admin API
    Pattern.compile("@GetMapping\\(\"/admin\"\\)"),

    // 147. Returning full database records without access control
    Pattern.compile("return ResponseEntity\\.ok\\(userRepository\\.findAll\\(\\)\\)"),

    // 148. Using `Serializable` for sensitive data
    Pattern.compile("implements Serializable"),

    // 149. Allowing unrestricted CORS access
    Pattern.compile("cors\\.setAllowedOrigins\\(Collections\\.singletonList\\(\".*\"\\)\\)"),

    // 150. Not verifying `Origin` header in CORS policy
    Pattern.compile("cors\\.setAllowedOrigins\\(Collections\\.singletonList\\(\"*\"\\)\\)")
);
public static final List<Pattern> rbacPatterns = Arrays.asList(

    // 1. No role check in API endpoint (publicly accessible)
    Pattern.compile("\\@RequestMapping\\(\".*\"\\)\\s*public\\s+ResponseEntity"),

    // 2. Exposed sensitive admin routes without RBAC enforcement
    Pattern.compile("\\@RequestMapping\\(\"/admin/.*\"\\)"),

    // 3. No `@PreAuthorize` or `@RolesAllowed` on critical actions
    Pattern.compile("public\\s+ResponseEntity<.*>\\s+[a-zA-Z]+\\(.*@RequestParam"),

    // 4. Unprotected user management endpoints
    Pattern.compile("\\@RequestMapping\\(\"/user-management\"\\)"),

    // 5. No `hasRole()` or `hasAuthority()` in security configuration
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.anyRequest\\(\\)\\.authenticated\\(\\)"),

    // 6. Allowing unauthenticated API access without any role enforcement
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.antMatchers\\(\"/.*\"\\)\\.permitAll"),

    // 7. No authentication required for accessing user profiles
    Pattern.compile("\\@GetMapping\\(\"/profile\"\\)"),

    // 8. Missing role validation in API requests
    Pattern.compile("return ResponseEntity\\.ok\\(repository\\.findById\\("),

    // 9. No role check when deleting users
    Pattern.compile("\\@DeleteMapping\\(\"/users/.*\"\\)"),

    // 10. Missing RBAC checks for modifying user permissions
    Pattern.compile("\\@PostMapping\\(\"/users/updateRole\"\\)"),

    // 11. No authorization checks when listing all users
    Pattern.compile("\\@GetMapping\\(\"/users\"\\)"),

    // 12. Exposing sensitive endpoints via GraphQL without access control
    Pattern.compile("\\@QueryMapping\\(\".*\"\\)"),

    // 13. Direct access to database records without RBAC filtering
    Pattern.compile("repository\\.findById\\(request\\.getParameter"),

    // 14. Not verifying user roles when performing sensitive actions
    Pattern.compile("repository\\.delete\\(request\\.getParameter"),

    // 15. Missing `@Secured` annotation on admin-only actions
    Pattern.compile("public\\s+[a-zA-Z0-9<>]+\\s+[a-zA-Z0-9]+\\(.*\\)\\s*\\{"),

    // 16. No explicit authentication enforcement in WebSocket endpoints
    Pattern.compile("\\@ServerEndpoint\\(\".*\"\\)"),

    // 17. Publicly exposed API endpoints with sensitive data
    Pattern.compile("\\@GetMapping\\(\"/admin/settings\"\\)"),

    // 18. Missing `@PreAuthorize` on repository methods
    Pattern.compile("public\\s+[a-zA-Z0-9]+\\s+[a-zA-Z0-9]+\\(.*JpaRepository"),

    // 19. Exposing user details via public API
    Pattern.compile("\\@GetMapping\\(\"/user/details\"\\)"),

    // 20. Unprotected file upload endpoint
    Pattern.compile("\\@PostMapping\\(\"/upload\"\\)"),

    // 21. Unrestricted file download access
    Pattern.compile("\\@GetMapping\\(\"/download\"\\)"),

    // 22. No authentication required for accessing logs
    Pattern.compile("\\@GetMapping\\(\"/logs\"\\)"),

    // 23. Allowing admin actions without role verification
    Pattern.compile("repository\\.deleteById\\(request\\.getParameter"),

    // 24. Unprotected endpoints allowing account deletion
    Pattern.compile("\\@DeleteMapping\\(\"/account/delete\"\\)"),

    // 25. Allowing access to admin dashboard without role enforcement
    Pattern.compile("\\@GetMapping\\(\"/admin/dashboard\"\\)"),

    // 26. Allowing unrestricted user role changes
    Pattern.compile("\\@PostMapping\\(\"/updateRole\"\\)"),

    // 27. Missing ownership validation when modifying user details
    Pattern.compile("userRepository\\.save\\("),

    // 28. Using `permitAll()` on sensitive actions
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.antMatchers\\(\"/admin\"\\)\\.permitAll"),

    // 29. No security checks when performing financial transactions
    Pattern.compile("\\@PostMapping\\(\"/payment\"\\)"),

    // 30. Allowing user enumeration via error messages
    Pattern.compile("return ResponseEntity\\.status\\(HttpStatus\\.UNAUTHORIZED\\)\\.body\\(\"Invalid username\"\\)"),

    // 31. No rate-limiting on authentication endpoints
    Pattern.compile("return ResponseEntity\\.ok\\(.*\\)"),

    // 32. Allowing unrestricted API token generation
    Pattern.compile("Jwts\\.builder\\(\\)\\.signWith\\("),

    // 33. Accepting user IDs as URL parameters without verification
    Pattern.compile("\\@RequestParam\\(\"(id|userId|accountId)\"\\)"),

    // 34. Exposing admin configurations via public API
    Pattern.compile("\\@GetMapping\\(\"/config/admin\"\\)"),

    // 35. Unrestricted access to password reset functionality
    Pattern.compile("\\@PostMapping\\(\"/reset-password\"\\)"),

    // 36. Allowing access to sensitive settings without authentication
    Pattern.compile("\\@GetMapping\\(\"/settings\"\\)"),

    // 37. Missing authentication for creating new users
    Pattern.compile("\\@PostMapping\\(\"/users/create\"\\)"),

    // 38. Allowing guest users to modify user details
    Pattern.compile("\\@PutMapping\\(\"/users/update\"\\)"),

    // 39. Exposing internal system logs to public API
    Pattern.compile("\\@GetMapping\\(\"/system/logs\"\\)"),

    // 40. No access control on deleting database records
    Pattern.compile("\\@DeleteMapping\\(\"/delete\"\\)"),

    // 41. Missing `@Secured` annotation on admin endpoints
    Pattern.compile("public\\s+[a-zA-Z0-9<>]+\\s+delete.*\\(.*\\)\\s*\\{"),

    // 42. No role validation in request handling
    Pattern.compile("return ResponseEntity\\.ok\\(repository\\.getAll\\(\\)\\)"),

    // 43. Allowing guest users to access admin endpoints
    Pattern.compile("\\@GetMapping\\(\"/admin/reports\"\\)"),

    // 44. No access control for sensitive documents
    Pattern.compile("\\@GetMapping\\(\"/documents\"\\)"),

    // 45. Allowing unrestricted account creation
    Pattern.compile("\\@PostMapping\\(\"/signup\"\\)"),

    // 46. No authentication required for modifying configurations
    Pattern.compile("\\@PostMapping\\(\"/config/update\"\\)"),

    // 47. Allowing unrestricted mass data deletion
    Pattern.compile("\\@DeleteMapping\\(\"/deleteAll\"\\)"),

    // 48. No authentication on critical actions
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.antMatchers\\(\"/critical\"\\)\\.permitAll"),

    // 49. No authorization enforcement in API controllers
    Pattern.compile("public\\s+[a-zA-Z0-9<>]+\\s+processRequest\\(.*\\)\\s*\\{"),

    // 50. Unrestricted access to database backups
    Pattern.compile("\\@GetMapping\\(\"/backup\"\\)")
);
public static final List<Pattern> rbacPatterns = Arrays.asList(

    // 51. No role verification on a REST controller method
    Pattern.compile("\\@RestController\\s*public\\s+class\\s+.*\\{"),

    // 52. Allowing all requests without role validation
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.antMatchers\\(\"/.*\"\\)\\.permitAll\\(\\)"),

    // 53. No access control applied in `@GetMapping`
    Pattern.compile("\\@GetMapping\\(\"/.*\"\\)"),

    // 54. Missing `@RolesAllowed` annotation for restricted actions
    Pattern.compile("public\\s+[a-zA-Z0-9]+\\s+[a-zA-Z0-9]+\\(.*\\)\\s*\\{"),

    // 55. No `@PreAuthorize` check on an important method
    Pattern.compile("public\\s+[a-zA-Z0-9]+\\s+[a-zA-Z0-9]+\\(.*\\)\\s*\\{"),

    // 56. Allowing unrestricted API access to system logs
    Pattern.compile("\\@GetMapping\\(\"/system/logs\"\\)"),

    // 57. No authentication required for API tokens
    Pattern.compile("Jwts\\.builder\\(\\)\\.signWith\\("),

    // 58. Missing `hasAuthority()` in Spring Security
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.anyRequest\\(\\)\\.authenticated\\(\\)"),

    // 59. Unrestricted data retrieval from repositories
    Pattern.compile("repository\\.findAll\\(\\)"),

    // 60. No RBAC validation for deleting records
    Pattern.compile("\\@DeleteMapping\\(\"/delete/.*\"\\)"),

    // 61. Missing ownership validation in REST controllers
    Pattern.compile("repository\\.findById\\(request\\.getParameter\\(\"userId\"\\)\\)"),

    // 62. Exposing API without RBAC filtering
    Pattern.compile("\\@RequestMapping\\(\"/api/.*\"\\)"),

    // 63. Direct access to session attributes without validation
    Pattern.compile("session\\.getAttribute\\(\".*\"\\)"),

    // 64. No `@Secured` annotation on protected methods
    Pattern.compile("public\\s+[a-zA-Z0-9<>]+\\s+[a-zA-Z0-9]+\\(.*\\)\\s*\\{"),

    // 65. Allowing unrestricted admin panel access
    Pattern.compile("\\@GetMapping\\(\"/admin\"\\)"),

    // 66. Missing authentication in WebSocket endpoints
    Pattern.compile("\\@ServerEndpoint\\(\"/.*\"\\)"),

    // 67. No restrictions on downloading sensitive files
    Pattern.compile("\\@GetMapping\\(\"/files/download\"\\)"),

    // 68. Allowing unrestricted access to backup files
    Pattern.compile("\\@GetMapping\\(\"/backup/.*\"\\)"),

    // 69. No authentication checks for system settings modifications
    Pattern.compile("\\@PostMapping\\(\"/settings/update\"\\)"),

    // 70. Using `.anyRequest().authenticated()` without specific role checks
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.anyRequest\\(\\)\\.authenticated\\(\\)"),

    // 71. Publicly accessible API key management
    Pattern.compile("\\@GetMapping\\(\"/api-keys\"\\)"),

    // 72. Allowing unrestricted file uploads
    Pattern.compile("\\@PostMapping\\(\"/upload\"\\)"),

    // 73. No security enforcement on account deletion
    Pattern.compile("\\@DeleteMapping\\(\"/account/delete\"\\)"),

    // 74. Allowing any user to access payment processing endpoints
    Pattern.compile("\\@PostMapping\\(\"/payment/process\"\\)"),

    // 75. No ownership verification in repository operations
    Pattern.compile("repository\\.findById\\(request\\.getParameter\\(\"id\"\\)\\)"),

    // 76. Exposing database configuration endpoints without security
    Pattern.compile("\\@GetMapping\\(\"/db/config\"\\)"),

    // 77. Allowing unrestricted password changes
    Pattern.compile("\\@PostMapping\\(\"/change-password\"\\)"),

    // 78. Missing authentication in OAuth authorization endpoints
    Pattern.compile("\\@GetMapping\\(\"/oauth/authorize\"\\)"),

    // 79. Allowing unrestricted bulk user updates
    Pattern.compile("\\@PostMapping\\(\"/users/update\"\\)"),

    // 80. No role-based restrictions on API key usage
    Pattern.compile("return ResponseEntity\\.ok\\(apiKeyRepository\\.findAll\\(\\)\\)"),

    // 81. Missing `@PreAuthorize` in sensitive entity operations
    Pattern.compile("JpaRepository\\.<.*>.*save\\(.*\\)"),

    // 82. Allowing unrestricted access to user contact details
    Pattern.compile("\\@GetMapping\\(\"/users/contacts\"\\)"),

    // 83. No security validation on email change requests
    Pattern.compile("\\@PostMapping\\(\"/change-email\"\\)"),

    // 84. No role-based validation on session management
    Pattern.compile("\\@GetMapping\\(\"/sessions\"\\)"),

    // 85. Exposing internal API endpoints to unauthorized users
    Pattern.compile("\\@RequestMapping\\(\"/internal/.*\"\\)"),

    // 86. Allowing unrestricted password recovery requests
    Pattern.compile("\\@PostMapping\\(\"/recover-password\"\\)"),

    // 87. No access control for user role modifications
    Pattern.compile("\\@PostMapping\\(\"/roles/update\"\\)"),

    // 88. Missing authentication in API rate-limiting endpoints
    Pattern.compile("\\@GetMapping\\(\"/rate-limit\"\\)"),

    // 89. Unrestricted access to audit logs
    Pattern.compile("\\@GetMapping\\(\"/audit-logs\"\\)"),

    // 90. Missing security restrictions on token refresh endpoints
    Pattern.compile("\\@PostMapping\\(\"/refresh-token\"\\)"),

    // 91. Allowing unrestricted admin password resets
    Pattern.compile("\\@PostMapping\\(\"/admin/reset-password\"\\)"),

    // 92. No access control for updating application settings
    Pattern.compile("\\@PostMapping\\(\"/app-settings/update\"\\)"),

    // 93. Allowing unrestricted deletion of API keys
    Pattern.compile("\\@DeleteMapping\\(\"/api-keys/delete\"\\)"),

    // 94. No authentication required for exporting data
    Pattern.compile("\\@GetMapping\\(\"/export\"\\)"),

    // 95. Allowing unrestricted access to admin reports
    Pattern.compile("\\@GetMapping\\(\"/admin/reports\"\\)"),

    // 96. No authentication for external integrations
    Pattern.compile("\\@GetMapping\\(\"/integrations\"\\)"),

    // 97. Unrestricted access to user notifications
    Pattern.compile("\\@GetMapping\\(\"/notifications\"\\)"),

    // 98. Allowing unrestricted application logs retrieval
    Pattern.compile("\\@GetMapping\\(\"/app-logs\"\\)"),

    // 99. No security validation when retrieving user roles
    Pattern.compile("\\@GetMapping\\(\"/roles\"\\)"),

    // 100. Exposing financial transaction history without RBAC
    Pattern.compile("\\@GetMapping\\(\"/transactions\"\\)")
);
public static final List<Pattern> rbacPatterns = Arrays.asList(

    // 101. Missing `@PreAuthorize` on controller methods
    Pattern.compile("public\\s+[a-zA-Z0-9<>]+\\s+[a-zA-Z0-9]+\\(.*\\)\\s*\\{"),

    // 102. No authentication required for API access
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.anyRequest\\(\\)\\.permitAll\\(\\)"),

    // 103. Missing `hasRole()` or `hasAuthority()` in security configurations
    Pattern.compile("httpSecurity\\.authorizeRequests\\(\\)\\.anyRequest\\(\\)\\.authenticated\\(\\)"),

    // 104. Exposing sensitive endpoints without authorization
    Pattern.compile("\\@GetMapping\\(\"/admin/settings\"\\)"),

    // 105. No security validation in file access controllers
    Pattern.compile("\\@GetMapping\\(\"/files/.*\"\\)"),

    // 106. Allowing unrestricted API key retrieval
    Pattern.compile("\\@GetMapping\\(\"/api-keys\"\\)"),

    // 107. No access control for user role modifications
    Pattern.compile("\\@PostMapping\\(\"/roles/update\"\\)"),

    // 108. Missing `@Secured` annotation for admin endpoints
    Pattern.compile("public\\s+[a-zA-Z0-9]+\\s+adminFunction\\(.*\\)\\s*\\{"),

    // 109. Unrestricted password resets without authentication
    Pattern.compile("\\@PostMapping\\(\"/reset-password\"\\)"),

    // 110. No security validation for user deletion
    Pattern.compile("\\@DeleteMapping\\(\"/users/delete/.*\"\\)"),

    // 111. Missing ownership verification when modifying user data
    Pattern.compile("userRepository\\.save\\(.*\\)"),

    // 112. Allowing guest users to access user profile endpoints
    Pattern.compile("\\@GetMapping\\(\"/profile\"\\)"),

    // 113. Unprotected endpoints allowing role assignment
    Pattern.compile("\\@PostMapping\\(\"/users/assign-role\"\\)"),

    // 114. No role-based access control in repository methods
    Pattern.compile("JpaRepository\\.<.*>.*save\\(.*\\)"),

    // 115. Exposing session information via unsecured API
    Pattern.compile("\\@GetMapping\\(\"/session/info\"\\)"),

    // 116. Allowing unrestricted modification of security settings
    Pattern.compile("\\@PostMapping\\(\"/security/update\"\\)"),

    // 117. No authentication required for data exports
    Pattern.compile("\\@GetMapping\\(\"/data/export\"\\)"),

    // 118. Allowing unrestricted deletion of database records
    Pattern.compile("\\@DeleteMapping\\(\"/deleteAll\"\\)"),

    // 119. Missing security validation on WebSocket connections
    Pattern.compile("\\@ServerEndpoint\\(\"/ws\"\\)"),

    // 120. No access restrictions on retrieving user lists
    Pattern.compile("\\@GetMapping\\(\"/users\"\\)"),

    // 121. Exposing transaction history without security checks
    Pattern.compile("\\@GetMapping\\(\"/transactions\"\\)"),

    // 122. Unrestricted session termination
    Pattern.compile("\\@PostMapping\\(\"/sessions/terminate\"\\)"),

    // 123. No authentication for modifying API keys
    Pattern.compile("\\@PostMapping\\(\"/api-keys/update\"\\)"),

    // 124. Unrestricted deletion of user data
    Pattern.compile("\\@DeleteMapping\\(\"/user/delete/.*\"\\)"),

    // 125. Missing authentication for dashboard access
    Pattern.compile("\\@GetMapping\\(\"/dashboard\"\\)"),

    // 126. Unsecured endpoint for retrieving user logs
    Pattern.compile("\\@GetMapping\\(\"/user/logs\"\\)"),

    // 127. Allowing unrestricted password updates
    Pattern.compile("\\@PostMapping\\(\"/user/update-password\"\\)"),

    // 128. No validation when retrieving database backups
    Pattern.compile("\\@GetMapping\\(\"/backup/files\"\\)"),

    // 129. Missing authentication for creating API tokens
    Pattern.compile("\\@PostMapping\\(\"/api-token/create\"\\)"),

    // 130. No role-based restrictions on user status updates
    Pattern.compile("\\@PostMapping\\(\"/user/status/update\"\\)"),

    // 131. Unrestricted access to audit trails
    Pattern.compile("\\@GetMapping\\(\"/audit-trails\"\\)"),

    // 132. No authentication for accessing sensitive application logs
    Pattern.compile("\\@GetMapping\\(\"/logs/application\"\\)"),

    // 133. Unsecured access to email templates
    Pattern.compile("\\@GetMapping\\(\"/email-templates\"\\)"),

    // 134. Missing security checks for modifying user notifications
    Pattern.compile("\\@PostMapping\\(\"/notifications/update\"\\)"),

    // 135. No authentication required for retrieving organization details
    Pattern.compile("\\@GetMapping\\(\"/organization/details\"\\)"),

    // 136. Allowing unrestricted deletion of security policies
    Pattern.compile("\\@DeleteMapping\\(\"/security-policy/delete\"\\)"),

    // 137. No role-based validation for administrative actions
    Pattern.compile("adminRepository\\.execute\\(.*\\)"),

    // 138. Missing role validation in entity service methods
    Pattern.compile("public\\s+[a-zA-Z0-9]+\\s+[a-zA-Z0-9]+Service\\(.*\\)\\s*\\{"),

    // 139. Unprotected endpoints for retrieving private messages
    Pattern.compile("\\@GetMapping\\(\"/messages/private\"\\)"),

    // 140. No authentication required for downloading user-generated content
    Pattern.compile("\\@GetMapping\\(\"/user-content/download\"\\)"),

    // 141. Allowing unrestricted modification of payment methods
    Pattern.compile("\\@PostMapping\\(\"/payment-methods/update\"\\)"),

    // 142. No access control for modifying administrator roles
    Pattern.compile("\\@PostMapping\\(\"/admin/roles/update\"\\)"),

    // 143. Unrestricted access to customer support conversations
    Pattern.compile("\\@GetMapping\\(\"/support/chats\"\\)"),

    // 144. Missing role validation for modifying email configurations
    Pattern.compile("\\@PostMapping\\(\"/email/config/update\"\\)"),

    // 145. No authentication for retrieving analytics reports
    Pattern.compile("\\@GetMapping\\(\"/analytics/reports\"\\)"),

    // 146. Allowing unrestricted deletion of public API endpoints
    Pattern.compile("\\@DeleteMapping\\(\"/public-api/delete\"\\)"),

    // 147. Unrestricted API calls to access billing history
    Pattern.compile("\\@GetMapping\\(\"/billing/history\"\\)"),

    // 148. No authentication required for updating subscription plans
    Pattern.compile("\\@PostMapping\\(\"/subscription/update\"\\)"),

    // 149. Allowing unrestricted modification of system configurations
    Pattern.compile("\\@PostMapping\\(\"/system/config/update\"\\)"),

    // 150. No role validation when accessing private system endpoints
    Pattern.compile("\\@RequestMapping\\(\"/system/private\"\\)")
);
