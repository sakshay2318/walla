package com.security.analyzer;

import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CountDownLatch;

public class LanguageSelection {

    public static ArrayList<String> selectedLanguages = new ArrayList<>();
    public static Map<String, ArrayList<String>> languageScanOptions = new HashMap<>();
    private static JPanel subOptionPanel; 
    private static Map<String, JPanel> scanOptionPanels = new HashMap<>();
    private static String currentExpandedLanguage = null; 

    public static void main(String[] args) {
        CountDownLatch latch = new CountDownLatch(1);
        createAndShowGUI(latch);
    }

    public static void createAndShowGUI(CountDownLatch latch) {
        JFrame frame = new JFrame("Security Scanner - Language Selection");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 400);
        frame.setLocationRelativeTo(null);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());

        JButton button = new JButton("Choose Language");
        button.setFont(new Font("Arial", Font.BOLD, 18));
        button.setBackground(new Color(45, 140, 240));
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(new LineBorder(Color.BLACK, 2, true));
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        button.addActionListener(e -> showLanguageDialog(latch));

        mainPanel.add(button, BorderLayout.CENTER);
        frame.add(mainPanel);
        frame.setVisible(true);
    }

    public static void showLanguageDialog(CountDownLatch latch) {
        final JDialog dialog = new JDialog();
        dialog.setTitle("Select Language & Scan Options");
        dialog.setModal(true);
        dialog.setSize(550, 600);
        dialog.setLocationRelativeTo(null);
        dialog.getContentPane().setBackground(new Color(30, 30, 30)); 

        String[] languages = {"SpringBoot", "Scala", "Electrode", "Node.js"};

        Map<String, String[]> scanOptions = new HashMap<>();
        scanOptions.put("SpringBoot", new String[]{"IDOR", "RBAC", "SQL Injection", "XSS", "CSRF"});
        scanOptions.put("Scala", new String[]{"RBAC", "Object Ownership", "Injection", "XSS", "IDOR"});
        scanOptions.put("Electrode", new String[]{"Security Headers", "OAuth Issues", "XSS", "CSRF"});
        scanOptions.put("Node.js", new String[]{"IDOR", "RBAC", "NoSQL Injection", "Command Injection"});

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(languages.length, 1, 5, 5));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panel.setBackground(new Color(30, 30, 30));

        JCheckBox[] languageCheckBoxes = new JCheckBox[languages.length];
        subOptionPanel = new JPanel();
        subOptionPanel.setLayout(new BorderLayout());
        subOptionPanel.setBackground(new Color(40, 40, 40));

        for (int i = 0; i < languages.length; i++) {
            String language = languages[i];

            JPanel langPanel = new JPanel(new BorderLayout());
            langPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 2, true));
            langPanel.setBackground(new Color(50, 50, 50));
            langPanel.setPreferredSize(new Dimension(500, 40));

            languageCheckBoxes[i] = new JCheckBox(language);
            languageCheckBoxes[i].setFont(new Font("Arial", Font.BOLD, 16));
            languageCheckBoxes[i].setForeground(Color.WHITE);
            languageCheckBoxes[i].setBackground(new Color(50, 50, 50));
            languageCheckBoxes[i].setFocusPainted(false);

            JButton expandButton = new JButton("+");
            expandButton.setFont(new Font("Arial", Font.BOLD, 14));
            expandButton.setPreferredSize(new Dimension(40, 30));
            expandButton.setBackground(new Color(70, 130, 180));
            expandButton.setForeground(Color.WHITE);
            expandButton.setBorder(new LineBorder(Color.BLACK, 1, true));
            expandButton.setCursor(new Cursor(Cursor.HAND_CURSOR));

            langPanel.add(languageCheckBoxes[i], BorderLayout.WEST);
            langPanel.add(expandButton, BorderLayout.EAST);

            panel.add(langPanel);

            String[] options = scanOptions.get(language);
            JPanel subPanel = new JPanel();
            subPanel.setLayout(new GridLayout(options.length, 1));
            subPanel.setBorder(BorderFactory.createTitledBorder(language + " Scan Options"));
            subPanel.setBackground(new Color(60, 60, 60));

            for (String option : options) {
                JCheckBox checkBox = new JCheckBox(option);
                checkBox.setFont(new Font("Arial", Font.PLAIN, 14));
                checkBox.setForeground(Color.WHITE);
                checkBox.setBackground(new Color(60, 60, 60));
                subPanel.add(checkBox);
            }

            scanOptionPanels.put(language, subPanel);

            expandButton.addActionListener(e -> {
                if (currentExpandedLanguage != null) {
                    subOptionPanel.removeAll();
                }

                if (!language.equals(currentExpandedLanguage)) {
                    subOptionPanel.add(scanOptionPanels.get(language), BorderLayout.CENTER);
                    currentExpandedLanguage = language;
                } else {
                    currentExpandedLanguage = null;
                }

                subOptionPanel.revalidate();
                subOptionPanel.repaint();
            });

            languageCheckBoxes[i].addActionListener(e -> {
                boolean isSelected = languageCheckBoxes[i].isSelected();
                for (Component component : scanOptionPanels.get(language).getComponents()) {
                    if (component instanceof JCheckBox) {
                        ((JCheckBox) component).setSelected(isSelected);
                    }
                }
            });
        }

        JScrollPane scrollPane = new JScrollPane(panel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setPreferredSize(new Dimension(520, 250));

        JButton runScanButton = new JButton("Run Scan");
        runScanButton.setFont(new Font("Arial", Font.BOLD, 16));
        runScanButton.setBackground(new Color(34, 139, 34));
        runScanButton.setForeground(Color.WHITE);
        runScanButton.setCursor(new Cursor(Cursor.HAND_CURSOR));

        runScanButton.addActionListener(e -> {
            selectedLanguages.clear();
            languageScanOptions.clear();

            for (int i = 0; i < languages.length; i++) {
                if (languageCheckBoxes[i].isSelected()) {
                    String language = languages[i];
                    selectedLanguages.add(language);
                    ArrayList<String> selectedScans = new ArrayList<>();

                    for (Component component : scanOptionPanels.get(language).getComponents()) {
                        if (component instanceof JCheckBox) {
                            JCheckBox checkBox = (JCheckBox) component;
                            if (checkBox.isSelected()) {
                                selectedScans.add(checkBox.getText());
                            }
                        }
                    }
                    languageScanOptions.put(language, selectedScans);
                }
            }

            System.out.println("Selected Languages: " + selectedLanguages);
            System.out.println("Selected Scan Options: " + languageScanOptions);
            dialog.dispose();
            latch.countDown(); 
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(runScanButton);
        buttonPanel.setBackground(new Color(30, 30, 30));

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        mainPanel.add(scrollPane, BorderLayout.NORTH);
        mainPanel.add(subOptionPanel, BorderLayout.CENTER);
        mainPanel.add(buttonPanel, BorderLayout.SOUTH);

        dialog.getContentPane().add(mainPanel);
        dialog.setVisible(true);
    }
}
